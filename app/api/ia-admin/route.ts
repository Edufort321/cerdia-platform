import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { saveMemory } from '@/lib/ia/memory'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(req: NextRequest) {
  const { prompt } = await req.json()

  try {
    console.log('üì° Requ√™te IA re√ßue')
    const supabase = createRouteHandlerClient({ cookies })

    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.getSession()

    if (sessionError) console.error('‚ùå Erreur session Supabase:', sessionError)

    const user = session?.user
    if (!user) {
      console.warn('‚õî Utilisateur non authentifi√©')
      return NextResponse.json({ error: 'Non autoris√©' }, { status: 401 })
    }

    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (profileError) console.error('‚ùå Erreur profil Supabase:', profileError)

    if (!profile) {
      return NextResponse.json({ error: 'Profil introuvable' }, { status: 403 })
    }

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      temperature: 0.5,
      messages: [
        {
          role: 'system',
          content: `
Tu es l‚ÄôIA officielle de la direction Investissement CERDIA. Ton r√¥le est strat√©gique. 
Tu aides √† g√©n√©rer des id√©es, du code, des composants React, des propositions d‚Äôam√©lioration
pour le site, le eCommerce, les dashboards ou la vision d‚Äôaffaires.

R√©ponds toujours de mani√®re professionnelle, claire et concise.
Pose une question si n√©cessaire avant d‚Äôagir.
          `.trim(),
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
    })

    const result = completion.choices[0].message?.content ?? 'R√©ponse indisponible'

    // ‚úÖ Correction ici : ajout de supabase en premier argument
    await saveMemory(supabase, user.id, profile.role, [
      { role: 'user', content: prompt },
      { role: 'ia', content: result },
    ])

    return NextResponse.json({ result })
  } catch (err) {
    console.error('üî• Erreur IA Admin:', err)
    return NextResponse.json({ error: 'Erreur IA admin' }, { status: 500 })
  }
}
